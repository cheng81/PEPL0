namespace org.pepl.sample.arrangemeeting

process Main {
	create<Case> {
		new Arrange(Case)
		new Arrange(Case).Proposal('LO',0)
		new Arrange(Case).Proposal('DA',0)
	}

	process Arrange(Case) {

		must proposeLo<date> {
			response auto Proposal('LO',*).update<date>
			include acceptDa
			response acceptDa
		}
		proposeDa<date> {
			when Condition(proposeLo<*>) {
				response auto Proposal('DA',*).update<date>
				include acceptLo
				response acceptLo
			}
		}

		excluded acceptLo {
			response auto Proposal('LO',*).rejected
			debug('LO accepted')
			exclude acceptLo
			exclude acceptDa
		}
		excluded acceptDa {
			response auto Proposal('DA',*).rejected
			debug('DA accepted')
			exclude acceptDa
			exclude acceptLo
		}

		done { exclude super }

		process Proposal(Who,Date) {
			update<newDate> {
				exclude super
				new Proposal(Who,newDate)
			}
			rejected {
				exclude super
			}
		}
	}
	holdMeeting<Case> {
		when Accepting(Arrange(Case)) {
			let c := Arrange(Case)
			let p := c:Proposal(*,*)
			debug('Meeting',Case,'held at date',p.state.store.Date)
			response auto c.done
		}
	}

}