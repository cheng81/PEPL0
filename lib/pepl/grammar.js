module.exports = (function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "_": parse__,
        "actions": parse_actions,
        "angparams": parse_angparams,
        "angpredicates": parse_angpredicates,
        "angvalues": parse_angvalues,
        "annotation": parse_annotation,
        "annotations": parse_annotations,
        "bool": parse_bool,
        "boolexpr": parse_boolexpr,
        "comment": parse_comment,
        "debugaction": parse_debugaction,
        "else": parse_else,
        "event": parse_event,
        "eventdecl": parse_eventdecl,
        "eventid": parse_eventid,
        "eventpredicate": parse_eventpredicate,
        "except": parse_except,
        "exclude": parse_exclude,
        "expr": parse_expr,
        "float": parse_float,
        "id": parse_id,
        "include": parse_include,
        "integer": parse_integer,
        "isaccepting": parse_isaccepting,
        "iscondition": parse_iscondition,
        "isexecuted": parse_isexecuted,
        "ismilestone": parse_ismilestone,
        "isresponse": parse_isresponse,
        "isrunning": parse_isrunning,
        "let": parse_let,
        "litval": parse_litval,
        "module": parse_module,
        "namespace": parse_namespace,
        "newproc": parse_newproc,
        "opid": parse_opid,
        "opidchar": parse_opidchar,
        "params": parse_params,
        "parenparams": parse_parenparams,
        "parenpredicates": parse_parenpredicates,
        "parenvalues": parse_parenvalues,
        "parts": parse_parts,
        "pathtoken": parse_pathtoken,
        "predicate": parse_predicate,
        "predicates": parse_predicates,
        "procdecl": parse_procdecl,
        "procid": parse_procid,
        "procpath": parse_procpath,
        "proctokens": parse_proctokens,
        "response": parse_response,
        "singleboolexpr": parse_singleboolexpr,
        "space": parse_space,
        "strval": parse_strval,
        "strvaltok": parse_strvaltok,
        "value": parse_value,
        "values": parse_values,
        "varload": parse_varload,
        "when": parse_when,
        "whenboolexpr": parse_whenboolexpr,
        "whenboolexprs": parse_whenboolexprs,
        "whens": parse_whens
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "module";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_module() {
        var cacheKey = 'module@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse__();
        if (result3 !== null) {
          var result4 = parse_namespace();
          if (result4 !== null) {
            var result5 = parse__();
            if (result5 !== null) {
              var savedPos2 = pos;
              var savedPos3 = pos;
              var result10 = parse_procdecl();
              if (result10 !== null) {
                var result11 = parse__();
                if (result11 !== null) {
                  var result8 = [result10, result11];
                } else {
                  var result8 = null;
                  pos = savedPos3;
                }
              } else {
                var result8 = null;
                pos = savedPos3;
              }
              var result9 = result8 !== null
                ? (function(p) {return p})(result8[0])
                : null;
              if (result9 !== null) {
                var result7 = result9;
              } else {
                var result7 = null;
                pos = savedPos2;
              }
              if (result7 !== null) {
                var result6 = [];
                while (result7 !== null) {
                  result6.push(result7);
                  var savedPos2 = pos;
                  var savedPos3 = pos;
                  var result10 = parse_procdecl();
                  if (result10 !== null) {
                    var result11 = parse__();
                    if (result11 !== null) {
                      var result8 = [result10, result11];
                    } else {
                      var result8 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result8 = null;
                    pos = savedPos3;
                  }
                  var result9 = result8 !== null
                    ? (function(p) {return p})(result8[0])
                    : null;
                  if (result9 !== null) {
                    var result7 = result9;
                  } else {
                    var result7 = null;
                    pos = savedPos2;
                  }
                }
              } else {
                var result6 = null;
              }
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(ns, procs) { return gactions.finish() })(result1[1], result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_event() {
        var cacheKey = 'event@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos4 = pos;
        var savedPos5 = pos;
        var result20 = parse_id();
        if (result20 !== null) {
          var result21 = parse__();
          if (result21 !== null) {
            if (input.substr(pos, 1) === ".") {
              var result22 = ".";
              pos += 1;
            } else {
              var result22 = null;
              if (reportMatchFailures) {
                matchFailed("\".\"");
              }
            }
            if (result22 !== null) {
              var result23 = parse__();
              if (result23 !== null) {
                var result24 = parse_id();
                if (result24 !== null) {
                  var result25 = parse__();
                  if (result25 !== null) {
                    var result27 = parse_angvalues();
                    var result26 = result27 !== null ? result27 : '';
                    if (result26 !== null) {
                      var result18 = [result20, result21, result22, result23, result24, result25, result26];
                    } else {
                      var result18 = null;
                      pos = savedPos5;
                    }
                  } else {
                    var result18 = null;
                    pos = savedPos5;
                  }
                } else {
                  var result18 = null;
                  pos = savedPos5;
                }
              } else {
                var result18 = null;
                pos = savedPos5;
              }
            } else {
              var result18 = null;
              pos = savedPos5;
            }
          } else {
            var result18 = null;
            pos = savedPos5;
          }
        } else {
          var result18 = null;
          pos = savedPos5;
        }
        var result19 = result18 !== null
          ? (function(varid, evid, vals) {
          		return {type:'event',varname:varid,id:evid,params:vals}
          	})(result18[0], result18[4], result18[6])
          : null;
        if (result19 !== null) {
          var result17 = result19;
        } else {
          var result17 = null;
          pos = savedPos4;
        }
        if (result17 !== null) {
          var result0 = result17;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var savedPos2 = pos;
          var savedPos3 = pos;
          var result13 = parse_procpath();
          if (result13 !== null) {
            var result14 = parse__();
            if (result14 !== null) {
              if (input.substr(pos, 1) === ".") {
                var result15 = ".";
                pos += 1;
              } else {
                var result15 = null;
                if (reportMatchFailures) {
                  matchFailed("\".\"");
                }
              }
              if (result15 !== null) {
                var result16 = parse__();
                if (result16 !== null) {
                  var result11 = [result13, result14, result15, result16];
                } else {
                  var result11 = null;
                  pos = savedPos3;
                }
              } else {
                var result11 = null;
                pos = savedPos3;
              }
            } else {
              var result11 = null;
              pos = savedPos3;
            }
          } else {
            var result11 = null;
            pos = savedPos3;
          }
          var result12 = result11 !== null
            ? (function(p) {return p})(result11[0])
            : null;
          if (result12 !== null) {
            var result10 = result12;
          } else {
            var result10 = null;
            pos = savedPos2;
          }
          var result4 = result10 !== null ? result10 : '';
          if (result4 !== null) {
            var result5 = parse__();
            if (result5 !== null) {
              var result6 = parse_id();
              if (result6 !== null) {
                var result7 = parse__();
                if (result7 !== null) {
                  var result9 = parse_angvalues();
                  var result8 = result9 !== null ? result9 : '';
                  if (result8 !== null) {
                    var result2 = [result4, result5, result6, result7, result8];
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(path, evid, vals) {
            		return {type:'event',path:path,id:evid,params:vals}
            	})(result2[0], result2[2], result2[4])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("event");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_eventpredicate() {
        var cacheKey = 'eventpredicate@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos4 = pos;
        var savedPos5 = pos;
        var result20 = parse_id();
        if (result20 !== null) {
          var result21 = parse__();
          if (result21 !== null) {
            if (input.substr(pos, 1) === ".") {
              var result22 = ".";
              pos += 1;
            } else {
              var result22 = null;
              if (reportMatchFailures) {
                matchFailed("\".\"");
              }
            }
            if (result22 !== null) {
              var result23 = parse__();
              if (result23 !== null) {
                var result24 = parse_id();
                if (result24 !== null) {
                  var result25 = parse__();
                  if (result25 !== null) {
                    var result27 = parse_angpredicates();
                    var result26 = result27 !== null ? result27 : '';
                    if (result26 !== null) {
                      var result18 = [result20, result21, result22, result23, result24, result25, result26];
                    } else {
                      var result18 = null;
                      pos = savedPos5;
                    }
                  } else {
                    var result18 = null;
                    pos = savedPos5;
                  }
                } else {
                  var result18 = null;
                  pos = savedPos5;
                }
              } else {
                var result18 = null;
                pos = savedPos5;
              }
            } else {
              var result18 = null;
              pos = savedPos5;
            }
          } else {
            var result18 = null;
            pos = savedPos5;
          }
        } else {
          var result18 = null;
          pos = savedPos5;
        }
        var result19 = result18 !== null
          ? (function(varid, evid, vals) {
          		return {type:'eventpredicate',varname:varid,id:evid,params:vals}
          	})(result18[0], result18[4], result18[6])
          : null;
        if (result19 !== null) {
          var result17 = result19;
        } else {
          var result17 = null;
          pos = savedPos4;
        }
        if (result17 !== null) {
          var result0 = result17;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var savedPos2 = pos;
          var savedPos3 = pos;
          var result13 = parse_procpath();
          if (result13 !== null) {
            var result14 = parse__();
            if (result14 !== null) {
              if (input.substr(pos, 1) === ".") {
                var result15 = ".";
                pos += 1;
              } else {
                var result15 = null;
                if (reportMatchFailures) {
                  matchFailed("\".\"");
                }
              }
              if (result15 !== null) {
                var result16 = parse__();
                if (result16 !== null) {
                  var result11 = [result13, result14, result15, result16];
                } else {
                  var result11 = null;
                  pos = savedPos3;
                }
              } else {
                var result11 = null;
                pos = savedPos3;
              }
            } else {
              var result11 = null;
              pos = savedPos3;
            }
          } else {
            var result11 = null;
            pos = savedPos3;
          }
          var result12 = result11 !== null
            ? (function(p) {return p})(result11[0])
            : null;
          if (result12 !== null) {
            var result10 = result12;
          } else {
            var result10 = null;
            pos = savedPos2;
          }
          var result4 = result10 !== null ? result10 : '';
          if (result4 !== null) {
            var result5 = parse__();
            if (result5 !== null) {
              var result6 = parse_id();
              if (result6 !== null) {
                var result7 = parse__();
                if (result7 !== null) {
                  var result9 = parse_angpredicates();
                  var result8 = result9 !== null ? result9 : '';
                  if (result8 !== null) {
                    var result2 = [result4, result5, result6, result7, result8];
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(path, evid, vals) {
            		return {type:'eventpredicate',path:path,id:evid,params:vals}
            	})(result2[0], result2[2], result2[4])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("eventpredicate");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse__() {
        var cacheKey = '_@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result1 = [];
        var result6 = parse_space();
        while (result6 !== null) {
          result1.push(result6);
          var result6 = parse_space();
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var result4 = parse_comment();
          if (result4 !== null) {
            var result5 = parse__();
            if (result5 !== null) {
              var result3 = [result4, result5];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          var result2 = result3 !== null ? result3 : '';
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("spaces");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_space() {
        var cacheKey = 'space@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === " ") {
          var result2 = " ";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\" \"");
          }
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          if (input.substr(pos).match(/^[	\n\r]/) !== null) {
            var result1 = input.charAt(pos);
            pos++;
          } else {
            var result1 = null;
            if (reportMatchFailures) {
              matchFailed("[	\\n\\r]");
            }
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_comment() {
        var cacheKey = 'comment@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos3 = pos;
        if (input.substr(pos, 2) === "//") {
          var result10 = "//";
          pos += 2;
        } else {
          var result10 = null;
          if (reportMatchFailures) {
            matchFailed("\"//\"");
          }
        }
        if (result10 !== null) {
          var result11 = [];
          var savedPos4 = pos;
          var savedPos5 = pos;
          var savedReportMatchFailuresVar1 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos).match(/^[\n\r]/) !== null) {
            var result15 = input.charAt(pos);
            pos++;
          } else {
            var result15 = null;
            if (reportMatchFailures) {
              matchFailed("[\\n\\r]");
            }
          }
          reportMatchFailures = savedReportMatchFailuresVar1;
          if (result15 === null) {
            var result13 = '';
          } else {
            var result13 = null;
            pos = savedPos5;
          }
          if (result13 !== null) {
            if (input.length > pos) {
              var result14 = input.charAt(pos);
              pos++;
            } else {
              var result14 = null;
              if (reportMatchFailures) {
                matchFailed('any character');
              }
            }
            if (result14 !== null) {
              var result12 = [result13, result14];
            } else {
              var result12 = null;
              pos = savedPos4;
            }
          } else {
            var result12 = null;
            pos = savedPos4;
          }
          while (result12 !== null) {
            result11.push(result12);
            var savedPos4 = pos;
            var savedPos5 = pos;
            var savedReportMatchFailuresVar1 = reportMatchFailures;
            reportMatchFailures = false;
            if (input.substr(pos).match(/^[\n\r]/) !== null) {
              var result15 = input.charAt(pos);
              pos++;
            } else {
              var result15 = null;
              if (reportMatchFailures) {
                matchFailed("[\\n\\r]");
              }
            }
            reportMatchFailures = savedReportMatchFailuresVar1;
            if (result15 === null) {
              var result13 = '';
            } else {
              var result13 = null;
              pos = savedPos5;
            }
            if (result13 !== null) {
              if (input.length > pos) {
                var result14 = input.charAt(pos);
                pos++;
              } else {
                var result14 = null;
                if (reportMatchFailures) {
                  matchFailed('any character');
                }
              }
              if (result14 !== null) {
                var result12 = [result13, result14];
              } else {
                var result12 = null;
                pos = savedPos4;
              }
            } else {
              var result12 = null;
              pos = savedPos4;
            }
          }
          if (result11 !== null) {
            var result9 = [result10, result11];
          } else {
            var result9 = null;
            pos = savedPos3;
          }
        } else {
          var result9 = null;
          pos = savedPos3;
        }
        if (result9 !== null) {
          var result0 = result9;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 2) === "/*") {
            var result2 = "/*";
            pos += 2;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"/*\"");
            }
          }
          if (result2 !== null) {
            var savedPos1 = pos;
            var savedPos2 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            if (input.substr(pos, 2) === "*/") {
              var result8 = "*/";
              pos += 2;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("\"*/\"");
              }
            }
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result8 === null) {
              var result6 = '';
            } else {
              var result6 = null;
              pos = savedPos2;
            }
            if (result6 !== null) {
              if (input.length > pos) {
                var result7 = input.charAt(pos);
                pos++;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed('any character');
                }
              }
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
            if (result5 !== null) {
              var result3 = [];
              while (result5 !== null) {
                result3.push(result5);
                var savedPos1 = pos;
                var savedPos2 = pos;
                var savedReportMatchFailuresVar0 = reportMatchFailures;
                reportMatchFailures = false;
                if (input.substr(pos, 2) === "*/") {
                  var result8 = "*/";
                  pos += 2;
                } else {
                  var result8 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"*/\"");
                  }
                }
                reportMatchFailures = savedReportMatchFailuresVar0;
                if (result8 === null) {
                  var result6 = '';
                } else {
                  var result6 = null;
                  pos = savedPos2;
                }
                if (result6 !== null) {
                  if (input.length > pos) {
                    var result7 = input.charAt(pos);
                    pos++;
                  } else {
                    var result7 = null;
                    if (reportMatchFailures) {
                      matchFailed('any character');
                    }
                  }
                  if (result7 !== null) {
                    var result5 = [result6, result7];
                  } else {
                    var result5 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos1;
                }
              }
            } else {
              var result3 = null;
            }
            if (result3 !== null) {
              if (input.substr(pos, 2) === "*/") {
                var result4 = "*/";
                pos += 2;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed("\"*/\"");
                }
              }
              if (result4 !== null) {
                var result1 = [result2, result3, result4];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("comment");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_namespace() {
        var cacheKey = 'namespace@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 9) === "namespace") {
          var result3 = "namespace";
          pos += 9;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"namespace\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            var result5 = parse_id();
            if (result5 !== null) {
              var result6 = [];
              var savedPos2 = pos;
              var savedPos3 = pos;
              if (input.substr(pos, 1) === ".") {
                var result10 = ".";
                pos += 1;
              } else {
                var result10 = null;
                if (reportMatchFailures) {
                  matchFailed("\".\"");
                }
              }
              if (result10 !== null) {
                var result11 = parse_id();
                if (result11 !== null) {
                  var result8 = [result10, result11];
                } else {
                  var result8 = null;
                  pos = savedPos3;
                }
              } else {
                var result8 = null;
                pos = savedPos3;
              }
              var result9 = result8 !== null
                ? (function(i) {return i})(result8[1])
                : null;
              if (result9 !== null) {
                var result7 = result9;
              } else {
                var result7 = null;
                pos = savedPos2;
              }
              while (result7 !== null) {
                result6.push(result7);
                var savedPos2 = pos;
                var savedPos3 = pos;
                if (input.substr(pos, 1) === ".") {
                  var result10 = ".";
                  pos += 1;
                } else {
                  var result10 = null;
                  if (reportMatchFailures) {
                    matchFailed("\".\"");
                  }
                }
                if (result10 !== null) {
                  var result11 = parse_id();
                  if (result11 !== null) {
                    var result8 = [result10, result11];
                  } else {
                    var result8 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos3;
                }
                var result9 = result8 !== null
                  ? (function(i) {return i})(result8[1])
                  : null;
                if (result9 !== null) {
                  var result7 = result9;
                } else {
                  var result7 = null;
                  pos = savedPos2;
                }
              }
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(fst, rest) {
          	var id = join([fst].concat(rest),'.')
          	var module = gactions.defineModule(id)
          	return module
          })(result1[2], result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_proctokens() {
        var cacheKey = 'proctokens@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result3 = parse_procdecl();
        if (result3 !== null) {
          var result1 = result3;
        } else {
          var result2 = parse_eventdecl();
          if (result2 !== null) {
            var result1 = result2;
          } else {
            var result1 = null;;
          };
        }
        if (result1 !== null) {
          var result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            var result3 = parse_procdecl();
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result2 = parse_eventdecl();
              if (result2 !== null) {
                var result1 = result2;
              } else {
                var result1 = null;;
              };
            }
          }
        } else {
          var result0 = null;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_params() {
        var cacheKey = 'params@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_id();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var savedPos3 = pos;
          var result8 = parse__();
          if (result8 !== null) {
            if (input.substr(pos, 1) === ",") {
              var result9 = ",";
              pos += 1;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("\",\"");
              }
            }
            if (result9 !== null) {
              var result10 = parse__();
              if (result10 !== null) {
                var result11 = parse_id();
                if (result11 !== null) {
                  var result6 = [result8, result9, result10, result11];
                } else {
                  var result6 = null;
                  pos = savedPos3;
                }
              } else {
                var result6 = null;
                pos = savedPos3;
              }
            } else {
              var result6 = null;
              pos = savedPos3;
            }
          } else {
            var result6 = null;
            pos = savedPos3;
          }
          var result7 = result6 !== null
            ? (function(i) {return i})(result6[3])
            : null;
          if (result7 !== null) {
            var result5 = result7;
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var savedPos3 = pos;
            var result8 = parse__();
            if (result8 !== null) {
              if (input.substr(pos, 1) === ",") {
                var result9 = ",";
                pos += 1;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed("\",\"");
                }
              }
              if (result9 !== null) {
                var result10 = parse__();
                if (result10 !== null) {
                  var result11 = parse_id();
                  if (result11 !== null) {
                    var result6 = [result8, result9, result10, result11];
                  } else {
                    var result6 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result6 = null;
                  pos = savedPos3;
                }
              } else {
                var result6 = null;
                pos = savedPos3;
              }
            } else {
              var result6 = null;
              pos = savedPos3;
            }
            var result7 = result6 !== null
              ? (function(i) {return i})(result6[3])
              : null;
            if (result7 !== null) {
              var result5 = result7;
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(fst, rest) {
          	if(rest.length==0) {return [fst]}
          	return [fst].concat(rest)
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_angparams() {
        var cacheKey = 'angparams@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "<") {
          var result3 = "<";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"<\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            var result5 = parse_params();
            if (result5 !== null) {
              var result6 = parse__();
              if (result6 !== null) {
                if (input.substr(pos, 1) === ">") {
                  var result7 = ">";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\">\"");
                  }
                }
                if (result7 !== null) {
                  var result8 = parse__();
                  if (result8 !== null) {
                    var result1 = [result3, result4, result5, result6, result7, result8];
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(p) {return p})(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_parenparams() {
        var cacheKey = 'parenparams@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "(") {
          var result3 = "(";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"(\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            var result5 = parse_params();
            if (result5 !== null) {
              var result6 = parse__();
              if (result6 !== null) {
                if (input.substr(pos, 1) === ")") {
                  var result7 = ")";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\")\"");
                  }
                }
                if (result7 !== null) {
                  var result8 = parse__();
                  if (result8 !== null) {
                    var result1 = [result3, result4, result5, result6, result7, result8];
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(p) {return p})(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_angpredicates() {
        var cacheKey = 'angpredicates@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "<") {
          var result3 = "<";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"<\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            var result5 = parse_predicates();
            if (result5 !== null) {
              var result6 = parse__();
              if (result6 !== null) {
                if (input.substr(pos, 1) === ">") {
                  var result7 = ">";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\">\"");
                  }
                }
                if (result7 !== null) {
                  var result8 = parse__();
                  if (result8 !== null) {
                    var result1 = [result3, result4, result5, result6, result7, result8];
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(v) {return v})(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_parenpredicates() {
        var cacheKey = 'parenpredicates@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "(") {
          var result3 = "(";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"(\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            var result5 = parse_predicates();
            if (result5 !== null) {
              var result6 = parse__();
              if (result6 !== null) {
                if (input.substr(pos, 1) === ")") {
                  var result7 = ")";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\")\"");
                  }
                }
                if (result7 !== null) {
                  var result8 = parse__();
                  if (result8 !== null) {
                    var result1 = [result3, result4, result5, result6, result7, result8];
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(v) {return v})(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_angvalues() {
        var cacheKey = 'angvalues@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "<") {
          var result3 = "<";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"<\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            var result5 = parse_values();
            if (result5 !== null) {
              var result6 = parse__();
              if (result6 !== null) {
                if (input.substr(pos, 1) === ">") {
                  var result7 = ">";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\">\"");
                  }
                }
                if (result7 !== null) {
                  var result8 = parse__();
                  if (result8 !== null) {
                    var result1 = [result3, result4, result5, result6, result7, result8];
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(v) {return v})(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_parenvalues() {
        var cacheKey = 'parenvalues@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "(") {
          var result3 = "(";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"(\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            var result5 = parse_values();
            if (result5 !== null) {
              var result6 = parse__();
              if (result6 !== null) {
                if (input.substr(pos, 1) === ")") {
                  var result7 = ")";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\")\"");
                  }
                }
                if (result7 !== null) {
                  var result8 = parse__();
                  if (result8 !== null) {
                    var result1 = [result3, result4, result5, result6, result7, result8];
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(v) {return v})(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_procdecl() {
        var cacheKey = 'procdecl@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 7) === "process") {
          var result3 = "process";
          pos += 7;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"process\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            var result5 = parse_procid();
            if (result5 !== null) {
              var result6 = parse__();
              if (result6 !== null) {
                if (input.substr(pos, 1) === "{") {
                  var result7 = "{";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"{\"");
                  }
                }
                if (result7 !== null) {
                  var result8 = parse__();
                  if (result8 !== null) {
                    var result9 = parse_proctokens();
                    if (result9 !== null) {
                      var result10 = parse__();
                      if (result10 !== null) {
                        if (input.substr(pos, 1) === "}") {
                          var result11 = "}";
                          pos += 1;
                        } else {
                          var result11 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"}\"");
                          }
                        }
                        if (result11 !== null) {
                          var result12 = parse__();
                          if (result12 !== null) {
                            var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12];
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function() {
          	gactions.pop()
          })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_procid() {
        var cacheKey = 'procid@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_id();
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            var result6 = parse_parenparams();
            var result5 = result6 !== null ? result6 : '';
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(procId, prms) {
          	return gactions.defineProcess(procId,prms)
          })(result1[0], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_eventdecl() {
        var cacheKey = 'eventdecl@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_eventid();
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            var savedPos2 = pos;
            if (input.substr(pos, 1) === "{") {
              var result8 = "{";
              pos += 1;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("\"{\"");
              }
            }
            if (result8 !== null) {
              var result9 = parse__();
              if (result9 !== null) {
                var result10 = parse_parts();
                if (result10 !== null) {
                  var result11 = parse__();
                  if (result11 !== null) {
                    if (input.substr(pos, 1) === "}") {
                      var result12 = "}";
                      pos += 1;
                    } else {
                      var result12 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"}\"");
                      }
                    }
                    if (result12 !== null) {
                      var result7 = [result8, result9, result10, result11, result12];
                    } else {
                      var result7 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result7 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result7 = null;
                  pos = savedPos2;
                }
              } else {
                var result7 = null;
                pos = savedPos2;
              }
            } else {
              var result7 = null;
              pos = savedPos2;
            }
            var result5 = result7 !== null ? result7 : '';
            if (result5 !== null) {
              var result6 = parse__();
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function() {
          	gactions.pop()
          })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_eventid() {
        var cacheKey = 'eventid@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse__();
        if (result3 !== null) {
          var savedPos2 = pos;
          var savedPos3 = pos;
          var result12 = parse_annotations();
          if (result12 !== null) {
            var result13 = parse__();
            if (result13 !== null) {
              var result10 = [result12, result13];
            } else {
              var result10 = null;
              pos = savedPos3;
            }
          } else {
            var result10 = null;
            pos = savedPos3;
          }
          var result11 = result10 !== null
            ? (function(an) {return an})(result10[0])
            : null;
          if (result11 !== null) {
            var result9 = result11;
          } else {
            var result9 = null;
            pos = savedPos2;
          }
          var result4 = result9 !== null ? result9 : '';
          if (result4 !== null) {
            var result5 = parse_id();
            if (result5 !== null) {
              var result6 = parse__();
              if (result6 !== null) {
                var result8 = parse_angparams();
                var result7 = result8 !== null ? result8 : '';
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(annots, evId, prms) {
          	return gactions.defineEvent(evId,prms,annots)
          })(result1[1], result1[2], result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_annotations() {
        var cacheKey = 'annotations@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result1 = parse_annotation();
        if (result1 !== null) {
          var result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            var result1 = parse_annotation();
          }
        } else {
          var result0 = null;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_annotation() {
        var cacheKey = 'annotation@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var savedPos3 = pos;
        if (input.substr(pos, 4) === "must") {
          var result9 = "must";
          pos += 4;
        } else {
          var result9 = null;
          if (reportMatchFailures) {
            matchFailed("\"must\"");
          }
        }
        var result10 = result9 !== null
          ? (function() {return gactions.annotationMust()})()
          : null;
        if (result10 !== null) {
          var result8 = result10;
        } else {
          var result8 = null;
          pos = savedPos3;
        }
        if (result8 !== null) {
          var result3 = result8;
        } else {
          var savedPos2 = pos;
          if (input.substr(pos, 8) === "excluded") {
            var result6 = "excluded";
            pos += 8;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\"excluded\"");
            }
          }
          var result7 = result6 !== null
            ? (function() {return gactions.annotationExcluded()})()
            : null;
          if (result7 !== null) {
            var result5 = result7;
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          if (result5 !== null) {
            var result3 = result5;
          } else {
            var result3 = null;;
          };
        }
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(an) {return an})(result1[0])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_parts() {
        var cacheKey = 'parts@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result4 = parse_whens();
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var savedPos0 = pos;
          var result2 = parse_actions();
          var result3 = result2 !== null
            ? (function(acts) {
            		gactions.defaultPart(acts)
            	})(result2)
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_whens() {
        var cacheKey = 'whens@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_when();
        if (result1 !== null) {
          var result2 = parse__();
          if (result2 !== null) {
            var result3 = [];
            var savedPos2 = pos;
            var result11 = parse_when();
            if (result11 !== null) {
              var result12 = parse__();
              if (result12 !== null) {
                var result10 = [result11, result12];
              } else {
                var result10 = null;
                pos = savedPos2;
              }
            } else {
              var result10 = null;
              pos = savedPos2;
            }
            while (result10 !== null) {
              result3.push(result10);
              var savedPos2 = pos;
              var result11 = parse_when();
              if (result11 !== null) {
                var result12 = parse__();
                if (result12 !== null) {
                  var result10 = [result11, result12];
                } else {
                  var result10 = null;
                  pos = savedPos2;
                }
              } else {
                var result10 = null;
                pos = savedPos2;
              }
            }
            if (result3 !== null) {
              var result9 = parse_else();
              if (result9 !== null) {
                var result5 = result9;
              } else {
                var savedPos1 = pos;
                var result7 = parse_except();
                if (result7 !== null) {
                  var result8 = parse__();
                  if (result8 !== null) {
                    var result6 = [result7, result8];
                  } else {
                    var result6 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result6 = null;
                  pos = savedPos1;
                }
                if (result6 !== null) {
                  var result5 = result6;
                } else {
                  var result5 = null;;
                };
              }
              var result4 = result5 !== null ? result5 : '';
              if (result4 !== null) {
                var result0 = [result1, result2, result3, result4];
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_when() {
        var cacheKey = 'when@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 4) === "when") {
          var result3 = "when";
          pos += 4;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"when\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            var result5 = parse_whenboolexprs();
            if (result5 !== null) {
              var result6 = parse__();
              if (result6 !== null) {
                if (input.substr(pos, 1) === "{") {
                  var result7 = "{";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"{\"");
                  }
                }
                if (result7 !== null) {
                  var result8 = parse__();
                  if (result8 !== null) {
                    var result9 = parse_actions();
                    if (result9 !== null) {
                      var result10 = parse__();
                      if (result10 !== null) {
                        if (input.substr(pos, 1) === "}") {
                          var result11 = "}";
                          pos += 1;
                        } else {
                          var result11 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"}\"");
                          }
                        }
                        if (result11 !== null) {
                          var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11];
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(guard, acts) {
          	gactions.part(guard,acts)
          })(result1[2], result1[6])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_else() {
        var cacheKey = 'else@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 4) === "else") {
          var result3 = "else";
          pos += 4;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"else\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            if (input.substr(pos, 1) === "{") {
              var result5 = "{";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"{\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse__();
              if (result6 !== null) {
                var result7 = parse_actions();
                if (result7 !== null) {
                  var result8 = parse__();
                  if (result8 !== null) {
                    if (input.substr(pos, 1) === "}") {
                      var result9 = "}";
                      pos += 1;
                    } else {
                      var result9 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"}\"");
                      }
                    }
                    if (result9 !== null) {
                      var result10 = parse__();
                      if (result10 !== null) {
                        var result1 = [result3, result4, result5, result6, result7, result8, result9, result10];
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(acts) {
          		gactions.defaultPart(acts)
          	})(result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_except() {
        var cacheKey = 'except@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 6) === "except") {
          var result3 = "except";
          pos += 6;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"except\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            if (input.substr(pos, 1) === "{") {
              var result5 = "{";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"{\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse__();
              if (result6 !== null) {
                var result7 = parse_actions();
                if (result7 !== null) {
                  var result8 = parse__();
                  if (result8 !== null) {
                    if (input.substr(pos, 1) === "}") {
                      var result9 = "}";
                      pos += 1;
                    } else {
                      var result9 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"}\"");
                      }
                    }
                    if (result9 !== null) {
                      var result10 = parse__();
                      if (result10 !== null) {
                        var result1 = [result3, result4, result5, result6, result7, result8, result9, result10];
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(acts) {
          		gactions.defaultPart(acts,true)
          	})(result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_actions() {
        var cacheKey = 'actions@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse__();
        if (result3 !== null) {
          var result12 = parse_response();
          if (result12 !== null) {
            var result6 = result12;
          } else {
            var result11 = parse_exclude();
            if (result11 !== null) {
              var result6 = result11;
            } else {
              var result10 = parse_include();
              if (result10 !== null) {
                var result6 = result10;
              } else {
                var result9 = parse_newproc();
                if (result9 !== null) {
                  var result6 = result9;
                } else {
                  var result8 = parse_let();
                  if (result8 !== null) {
                    var result6 = result8;
                  } else {
                    var result7 = parse_debugaction();
                    if (result7 !== null) {
                      var result6 = result7;
                    } else {
                      var result6 = null;;
                    };
                  };
                };
              };
            };
          }
          if (result6 !== null) {
            var result4 = [];
            while (result6 !== null) {
              result4.push(result6);
              var result12 = parse_response();
              if (result12 !== null) {
                var result6 = result12;
              } else {
                var result11 = parse_exclude();
                if (result11 !== null) {
                  var result6 = result11;
                } else {
                  var result10 = parse_include();
                  if (result10 !== null) {
                    var result6 = result10;
                  } else {
                    var result9 = parse_newproc();
                    if (result9 !== null) {
                      var result6 = result9;
                    } else {
                      var result8 = parse_let();
                      if (result8 !== null) {
                        var result6 = result8;
                      } else {
                        var result7 = parse_debugaction();
                        if (result7 !== null) {
                          var result6 = result7;
                        } else {
                          var result6 = null;;
                        };
                      };
                    };
                  };
                };
              }
            }
          } else {
            var result4 = null;
          }
          if (result4 !== null) {
            var result5 = parse__();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(acts) {return acts})(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_debugaction() {
        var cacheKey = 'debugaction@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 5) === "debug") {
          var result8 = "debug";
          pos += 5;
        } else {
          var result8 = null;
          if (reportMatchFailures) {
            matchFailed("\"debug\"");
          }
        }
        if (result8 !== null) {
          var result3 = result8;
        } else {
          if (input.substr(pos, 3) === "log") {
            var result7 = "log";
            pos += 3;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("\"log\"");
            }
          }
          if (result7 !== null) {
            var result3 = result7;
          } else {
            var result3 = null;;
          };
        }
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            var result5 = parse_parenvalues();
            if (result5 !== null) {
              var result6 = parse__();
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(prms) {
          	return gactions.actionDebug(prms)
          })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_whenboolexprs() {
        var cacheKey = 'whenboolexprs@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var savedPos3 = pos;
        if (input.substr(pos, 1) === "(") {
          var result15 = "(";
          pos += 1;
        } else {
          var result15 = null;
          if (reportMatchFailures) {
            matchFailed("\"(\"");
          }
        }
        if (result15 !== null) {
          var result16 = parse__();
          if (result16 !== null) {
            if (input.substr(pos, 1) === "&") {
              var result25 = "&";
              pos += 1;
            } else {
              var result25 = null;
              if (reportMatchFailures) {
                matchFailed("\"&\"");
              }
            }
            if (result25 !== null) {
              var result17 = result25;
            } else {
              if (input.substr(pos, 1) === "|") {
                var result24 = "|";
                pos += 1;
              } else {
                var result24 = null;
                if (reportMatchFailures) {
                  matchFailed("\"|\"");
                }
              }
              if (result24 !== null) {
                var result17 = result24;
              } else {
                var result17 = null;;
              };
            }
            if (result17 !== null) {
              var result18 = parse__();
              if (result18 !== null) {
                var result19 = parse_whenboolexprs();
                if (result19 !== null) {
                  var result20 = parse__();
                  if (result20 !== null) {
                    var result21 = parse_whenboolexprs();
                    if (result21 !== null) {
                      var result22 = parse__();
                      if (result22 !== null) {
                        if (input.substr(pos, 1) === ")") {
                          var result23 = ")";
                          pos += 1;
                        } else {
                          var result23 = null;
                          if (reportMatchFailures) {
                            matchFailed("\")\"");
                          }
                        }
                        if (result23 !== null) {
                          var result13 = [result15, result16, result17, result18, result19, result20, result21, result22, result23];
                        } else {
                          var result13 = null;
                          pos = savedPos3;
                        }
                      } else {
                        var result13 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result13 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result13 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result13 = null;
                  pos = savedPos3;
                }
              } else {
                var result13 = null;
                pos = savedPos3;
              }
            } else {
              var result13 = null;
              pos = savedPos3;
            }
          } else {
            var result13 = null;
            pos = savedPos3;
          }
        } else {
          var result13 = null;
          pos = savedPos3;
        }
        var result14 = result13 !== null
          ? (function(andor, fst, snd) {
          		return gactions.makeGuard(andor,fst,snd)
          	})(result13[2], result13[4], result13[6])
          : null;
        if (result14 !== null) {
          var result12 = result14;
        } else {
          var result12 = null;
          pos = savedPos2;
        }
        if (result12 !== null) {
          var result0 = result12;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          if (input.substr(pos, 1) === "(") {
            var result5 = "(";
            pos += 1;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result5 !== null) {
            var result6 = parse__();
            if (result6 !== null) {
              if (input.substr(pos, 1) === "!") {
                var result7 = "!";
                pos += 1;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\"!\"");
                }
              }
              if (result7 !== null) {
                var result8 = parse__();
                if (result8 !== null) {
                  var result9 = parse_whenboolexprs();
                  if (result9 !== null) {
                    var result10 = parse__();
                    if (result10 !== null) {
                      if (input.substr(pos, 1) === ")") {
                        var result11 = ")";
                        pos += 1;
                      } else {
                        var result11 = null;
                        if (reportMatchFailures) {
                          matchFailed("\")\"");
                        }
                      }
                      if (result11 !== null) {
                        var result3 = [result5, result6, result7, result8, result9, result10, result11];
                      } else {
                        var result3 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result3 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result3 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result3 = null;
                  pos = savedPos1;
                }
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          var result4 = result3 !== null
            ? (function(expr) {
            		return gactions.makeGuardNot(expr)
            	})(result3[4])
            : null;
          if (result4 !== null) {
            var result2 = result4;
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_whenboolexpr();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_whenboolexpr() {
        var cacheKey = 'whenboolexpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result7 = parse_isexecuted();
        if (result7 !== null) {
          var result0 = result7;
        } else {
          var result6 = parse_iscondition();
          if (result6 !== null) {
            var result0 = result6;
          } else {
            var result5 = parse_isrunning();
            if (result5 !== null) {
              var result0 = result5;
            } else {
              var result4 = parse_isaccepting();
              if (result4 !== null) {
                var result0 = result4;
              } else {
                var result3 = parse_isresponse();
                if (result3 !== null) {
                  var result0 = result3;
                } else {
                  var result2 = parse_ismilestone();
                  if (result2 !== null) {
                    var result0 = result2;
                  } else {
                    var result1 = parse_boolexpr();
                    if (result1 !== null) {
                      var result0 = result1;
                    } else {
                      var result0 = null;;
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_isexecuted() {
        var cacheKey = 'isexecuted@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 8) === "Executed") {
          var result3 = "Executed";
          pos += 8;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"Executed\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            if (input.substr(pos, 1) === "(") {
              var result5 = "(";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"(\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse__();
              if (result6 !== null) {
                var savedPos4 = pos;
                var savedPos5 = pos;
                var result24 = parse_procpath();
                if (result24 !== null) {
                  var result25 = parse__();
                  if (result25 !== null) {
                    if (input.substr(pos, 1) === ".") {
                      var result26 = ".";
                      pos += 1;
                    } else {
                      var result26 = null;
                      if (reportMatchFailures) {
                        matchFailed("\".\"");
                      }
                    }
                    if (result26 !== null) {
                      var result22 = [result24, result25, result26];
                    } else {
                      var result22 = null;
                      pos = savedPos5;
                    }
                  } else {
                    var result22 = null;
                    pos = savedPos5;
                  }
                } else {
                  var result22 = null;
                  pos = savedPos5;
                }
                var result23 = result22 !== null
                  ? (function(p) {return p})(result22[0])
                  : null;
                if (result23 !== null) {
                  var result21 = result23;
                } else {
                  var result21 = null;
                  pos = savedPos4;
                }
                var result7 = result21 !== null ? result21 : '';
                if (result7 !== null) {
                  var result8 = parse_id();
                  if (result8 !== null) {
                    var result9 = parse__();
                    if (result9 !== null) {
                      var result20 = parse_angpredicates();
                      var result10 = result20 !== null ? result20 : '';
                      if (result10 !== null) {
                        var result11 = parse__();
                        if (result11 !== null) {
                          if (input.substr(pos, 1) === ")") {
                            var result12 = ")";
                            pos += 1;
                          } else {
                            var result12 = null;
                            if (reportMatchFailures) {
                              matchFailed("\")\"");
                            }
                          }
                          if (result12 !== null) {
                            var result13 = parse__();
                            if (result13 !== null) {
                              var savedPos2 = pos;
                              var savedPos3 = pos;
                              if (input.substr(pos, 2) === "as") {
                                var result17 = "as";
                                pos += 2;
                              } else {
                                var result17 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"as\"");
                                }
                              }
                              if (result17 !== null) {
                                var result18 = parse__();
                                if (result18 !== null) {
                                  var result19 = parse_id();
                                  if (result19 !== null) {
                                    var result15 = [result17, result18, result19];
                                  } else {
                                    var result15 = null;
                                    pos = savedPos3;
                                  }
                                } else {
                                  var result15 = null;
                                  pos = savedPos3;
                                }
                              } else {
                                var result15 = null;
                                pos = savedPos3;
                              }
                              var result16 = result15 !== null
                                ? (function(v) {return v})(result15[2])
                                : null;
                              if (result16 !== null) {
                                var result14 = result16;
                              } else {
                                var result14 = null;
                                pos = savedPos2;
                              }
                              if (result14 !== null) {
                                var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14];
                              } else {
                                var result1 = null;
                                pos = savedPos1;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(path, evid, vals, as) {
          	return gactions.makeGuardExecuted(path,evid,vals,as)
          })(result1[4], result1[5], result1[7], result1[11])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_iscondition() {
        var cacheKey = 'iscondition@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 9) === "Condition") {
          var result3 = "Condition";
          pos += 9;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"Condition\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            if (input.substr(pos, 1) === "(") {
              var result5 = "(";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"(\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse__();
              if (result6 !== null) {
                var savedPos2 = pos;
                var savedPos3 = pos;
                var result17 = parse_procpath();
                if (result17 !== null) {
                  var result18 = parse__();
                  if (result18 !== null) {
                    if (input.substr(pos, 1) === ".") {
                      var result19 = ".";
                      pos += 1;
                    } else {
                      var result19 = null;
                      if (reportMatchFailures) {
                        matchFailed("\".\"");
                      }
                    }
                    if (result19 !== null) {
                      var result15 = [result17, result18, result19];
                    } else {
                      var result15 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result15 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result15 = null;
                  pos = savedPos3;
                }
                var result16 = result15 !== null
                  ? (function(p) {return p})(result15[0])
                  : null;
                if (result16 !== null) {
                  var result14 = result16;
                } else {
                  var result14 = null;
                  pos = savedPos2;
                }
                var result7 = result14 !== null ? result14 : '';
                if (result7 !== null) {
                  var result8 = parse_id();
                  if (result8 !== null) {
                    var result9 = parse__();
                    if (result9 !== null) {
                      var result13 = parse_angpredicates();
                      var result10 = result13 !== null ? result13 : '';
                      if (result10 !== null) {
                        var result11 = parse__();
                        if (result11 !== null) {
                          if (input.substr(pos, 1) === ")") {
                            var result12 = ")";
                            pos += 1;
                          } else {
                            var result12 = null;
                            if (reportMatchFailures) {
                              matchFailed("\")\"");
                            }
                          }
                          if (result12 !== null) {
                            var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12];
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(path, evid, vals) {
          	return gactions.makeGuardCondition(path,evid,vals)
          })(result1[4], result1[5], result1[7])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_isrunning() {
        var cacheKey = 'isrunning@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 7) === "Running") {
          var result3 = "Running";
          pos += 7;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"Running\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            if (input.substr(pos, 1) === "(") {
              var result5 = "(";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"(\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse__();
              if (result6 !== null) {
                var result7 = parse_procpath();
                if (result7 !== null) {
                  var result8 = parse__();
                  if (result8 !== null) {
                    if (input.substr(pos, 1) === ")") {
                      var result9 = ")";
                      pos += 1;
                    } else {
                      var result9 = null;
                      if (reportMatchFailures) {
                        matchFailed("\")\"");
                      }
                    }
                    if (result9 !== null) {
                      var result10 = parse__();
                      if (result10 !== null) {
                        var savedPos2 = pos;
                        var savedPos3 = pos;
                        if (input.substr(pos, 2) === "as") {
                          var result15 = "as";
                          pos += 2;
                        } else {
                          var result15 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"as\"");
                          }
                        }
                        if (result15 !== null) {
                          var result16 = parse__();
                          if (result16 !== null) {
                            var result17 = parse_id();
                            if (result17 !== null) {
                              var result13 = [result15, result16, result17];
                            } else {
                              var result13 = null;
                              pos = savedPos3;
                            }
                          } else {
                            var result13 = null;
                            pos = savedPos3;
                          }
                        } else {
                          var result13 = null;
                          pos = savedPos3;
                        }
                        var result14 = result13 !== null
                          ? (function(v) {return v})(result13[2])
                          : null;
                        if (result14 !== null) {
                          var result12 = result14;
                        } else {
                          var result12 = null;
                          pos = savedPos2;
                        }
                        var result11 = result12 !== null ? result12 : '';
                        if (result11 !== null) {
                          var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11];
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(path, as) {
          	return gactions.makeGuardRunning(path,as)
          })(result1[4], result1[8])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_isaccepting() {
        var cacheKey = 'isaccepting@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 9) === "Accepting") {
          var result3 = "Accepting";
          pos += 9;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"Accepting\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            if (input.substr(pos, 1) === "(") {
              var result5 = "(";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"(\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse__();
              if (result6 !== null) {
                var result7 = parse_procpath();
                if (result7 !== null) {
                  if (input.substr(pos, 1) === ")") {
                    var result8 = ")";
                    pos += 1;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("\")\"");
                    }
                  }
                  if (result8 !== null) {
                    var result1 = [result3, result4, result5, result6, result7, result8];
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(path) {
          	return gactions.makeGuardAccepting(path)
          })(result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_isresponse() {
        var cacheKey = 'isresponse@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 4) === "Must") {
          var result3 = "Must";
          pos += 4;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"Must\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            if (input.substr(pos, 1) === "(") {
              var result5 = "(";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"(\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse__();
              if (result6 !== null) {
                var savedPos2 = pos;
                var savedPos3 = pos;
                var result17 = parse_procpath();
                if (result17 !== null) {
                  var result18 = parse__();
                  if (result18 !== null) {
                    if (input.substr(pos, 1) === ".") {
                      var result19 = ".";
                      pos += 1;
                    } else {
                      var result19 = null;
                      if (reportMatchFailures) {
                        matchFailed("\".\"");
                      }
                    }
                    if (result19 !== null) {
                      var result15 = [result17, result18, result19];
                    } else {
                      var result15 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result15 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result15 = null;
                  pos = savedPos3;
                }
                var result16 = result15 !== null
                  ? (function(p) {return p})(result15[0])
                  : null;
                if (result16 !== null) {
                  var result14 = result16;
                } else {
                  var result14 = null;
                  pos = savedPos2;
                }
                var result7 = result14 !== null ? result14 : '';
                if (result7 !== null) {
                  var result8 = parse_id();
                  if (result8 !== null) {
                    var result9 = parse__();
                    if (result9 !== null) {
                      var result13 = parse_angvalues();
                      var result10 = result13 !== null ? result13 : '';
                      if (result10 !== null) {
                        var result11 = parse__();
                        if (result11 !== null) {
                          if (input.substr(pos, 1) === ")") {
                            var result12 = ")";
                            pos += 1;
                          } else {
                            var result12 = null;
                            if (reportMatchFailures) {
                              matchFailed("\")\"");
                            }
                          }
                          if (result12 !== null) {
                            var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12];
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(path, evid, vals) {
          	return gactions.makeGuardResponse(path,evid,vals)
          })(result1[4], result1[5], result1[7])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ismilestone() {
        var cacheKey = 'ismilestone@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 9) === "Milestone") {
          var result3 = "Milestone";
          pos += 9;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"Milestone\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            if (input.substr(pos, 1) === "(") {
              var result5 = "(";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"(\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse__();
              if (result6 !== null) {
                var savedPos2 = pos;
                var savedPos3 = pos;
                var result17 = parse_procpath();
                if (result17 !== null) {
                  var result18 = parse__();
                  if (result18 !== null) {
                    if (input.substr(pos, 1) === ".") {
                      var result19 = ".";
                      pos += 1;
                    } else {
                      var result19 = null;
                      if (reportMatchFailures) {
                        matchFailed("\".\"");
                      }
                    }
                    if (result19 !== null) {
                      var result15 = [result17, result18, result19];
                    } else {
                      var result15 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result15 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result15 = null;
                  pos = savedPos3;
                }
                var result16 = result15 !== null
                  ? (function(p) {return p})(result15[0])
                  : null;
                if (result16 !== null) {
                  var result14 = result16;
                } else {
                  var result14 = null;
                  pos = savedPos2;
                }
                var result7 = result14 !== null ? result14 : '';
                if (result7 !== null) {
                  var result8 = parse_id();
                  if (result8 !== null) {
                    var result9 = parse__();
                    if (result9 !== null) {
                      var result13 = parse_angvalues();
                      var result10 = result13 !== null ? result13 : '';
                      if (result10 !== null) {
                        var result11 = parse__();
                        if (result11 !== null) {
                          if (input.substr(pos, 1) === ")") {
                            var result12 = ")";
                            pos += 1;
                          } else {
                            var result12 = null;
                            if (reportMatchFailures) {
                              matchFailed("\")\"");
                            }
                          }
                          if (result12 !== null) {
                            var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12];
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(path, evid, vals) {
          	return gactions.makeGuardMilestone(path,evid,vals)
          })(result1[4], result1[5], result1[7])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_let() {
        var cacheKey = 'let@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 3) === "let") {
          var result3 = "let";
          pos += 3;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"let\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            var result5 = parse_id();
            if (result5 !== null) {
              var result6 = parse__();
              if (result6 !== null) {
                if (input.substr(pos, 2) === ":=") {
                  var result7 = ":=";
                  pos += 2;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\":=\"");
                  }
                }
                if (result7 !== null) {
                  var result8 = parse__();
                  if (result8 !== null) {
                    var result9 = parse_value();
                    if (result9 !== null) {
                      var result10 = parse__();
                      if (result10 !== null) {
                        var result1 = [result3, result4, result5, result6, result7, result8, result9, result10];
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(varid, v) {
          	return gactions.actionLet(varid,v)
          })(result1[2], result1[6])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_response() {
        var cacheKey = 'response@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var savedPos3 = pos;
        if (input.substr(pos, 8) === "response") {
          var result10 = "response";
          pos += 8;
        } else {
          var result10 = null;
          if (reportMatchFailures) {
            matchFailed("\"response\"");
          }
        }
        if (result10 !== null) {
          var result11 = parse__();
          if (result11 !== null) {
            if (input.substr(pos, 4) === "auto") {
              var result12 = "auto";
              pos += 4;
            } else {
              var result12 = null;
              if (reportMatchFailures) {
                matchFailed("\"auto\"");
              }
            }
            if (result12 !== null) {
              var result13 = parse__();
              if (result13 !== null) {
                var result14 = parse_event();
                if (result14 !== null) {
                  var result8 = [result10, result11, result12, result13, result14];
                } else {
                  var result8 = null;
                  pos = savedPos3;
                }
              } else {
                var result8 = null;
                pos = savedPos3;
              }
            } else {
              var result8 = null;
              pos = savedPos3;
            }
          } else {
            var result8 = null;
            pos = savedPos3;
          }
        } else {
          var result8 = null;
          pos = savedPos3;
        }
        var result9 = result8 !== null
          ? (function(evt) {
          		return gactions.actionAutoResponse2(evt)
          	})(result8[4])
          : null;
        if (result9 !== null) {
          var result7 = result9;
        } else {
          var result7 = null;
          pos = savedPos2;
        }
        if (result7 !== null) {
          var result0 = result7;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          if (input.substr(pos, 8) === "response") {
            var result4 = "response";
            pos += 8;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"response\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse__();
            if (result5 !== null) {
              var result6 = parse_eventpredicate();
              if (result6 !== null) {
                var result2 = [result4, result5, result6];
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(evt) {
            		return gactions.actionResponse2(evt)
            	})(result2[2])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_newproc() {
        var cacheKey = 'newproc@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 4) === "new ") {
          var result3 = "new ";
          pos += 4;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"new \"");
          }
        }
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            var savedPos4 = pos;
            var savedPos5 = pos;
            var result20 = parse_procpath();
            if (result20 !== null) {
              var result21 = parse__();
              if (result21 !== null) {
                if (input.substr(pos, 1) === ".") {
                  var result22 = ".";
                  pos += 1;
                } else {
                  var result22 = null;
                  if (reportMatchFailures) {
                    matchFailed("\".\"");
                  }
                }
                if (result22 !== null) {
                  var result18 = [result20, result21, result22];
                } else {
                  var result18 = null;
                  pos = savedPos5;
                }
              } else {
                var result18 = null;
                pos = savedPos5;
              }
            } else {
              var result18 = null;
              pos = savedPos5;
            }
            var result19 = result18 !== null
              ? (function(p) {return p})(result18[0])
              : null;
            if (result19 !== null) {
              var result17 = result19;
            } else {
              var result17 = null;
              pos = savedPos4;
            }
            if (result17 !== null) {
              var result11 = result17;
            } else {
              var savedPos2 = pos;
              var savedPos3 = pos;
              var result15 = parse_id();
              if (result15 !== null) {
                if (input.substr(pos, 1) === ".") {
                  var result16 = ".";
                  pos += 1;
                } else {
                  var result16 = null;
                  if (reportMatchFailures) {
                    matchFailed("\".\"");
                  }
                }
                if (result16 !== null) {
                  var result13 = [result15, result16];
                } else {
                  var result13 = null;
                  pos = savedPos3;
                }
              } else {
                var result13 = null;
                pos = savedPos3;
              }
              var result14 = result13 !== null
                ? (function(v) {return {type:'path',val:[{type:'var',val:v}]}})(result13[0])
                : null;
              if (result14 !== null) {
                var result12 = result14;
              } else {
                var result12 = null;
                pos = savedPos2;
              }
              if (result12 !== null) {
                var result11 = result12;
              } else {
                var result11 = null;;
              };
            }
            var result5 = result11 !== null ? result11 : '';
            if (result5 !== null) {
              var result6 = parse_id();
              if (result6 !== null) {
                var result7 = parse__();
                if (result7 !== null) {
                  var result10 = parse_parenvalues();
                  var result8 = result10 !== null ? result10 : '';
                  if (result8 !== null) {
                    var result9 = parse__();
                    if (result9 !== null) {
                      var result1 = [result3, result4, result5, result6, result7, result8, result9];
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(path, procid, vals) {
          
          	return gactions.actionNew(path,procid,vals)
          })(result1[2], result1[3], result1[5])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_exclude() {
        var cacheKey = 'exclude@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 7) === "exclude") {
          var result3 = "exclude";
          pos += 7;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"exclude\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            var savedPos2 = pos;
            var savedPos3 = pos;
            var result14 = parse_procpath();
            if (result14 !== null) {
              var result15 = parse__();
              if (result15 !== null) {
                if (input.substr(pos, 1) === ".") {
                  var result16 = ".";
                  pos += 1;
                } else {
                  var result16 = null;
                  if (reportMatchFailures) {
                    matchFailed("\".\"");
                  }
                }
                if (result16 !== null) {
                  var result12 = [result14, result15, result16];
                } else {
                  var result12 = null;
                  pos = savedPos3;
                }
              } else {
                var result12 = null;
                pos = savedPos3;
              }
            } else {
              var result12 = null;
              pos = savedPos3;
            }
            var result13 = result12 !== null
              ? (function(p) {return p})(result12[0])
              : null;
            if (result13 !== null) {
              var result11 = result13;
            } else {
              var result11 = null;
              pos = savedPos2;
            }
            var result5 = result11 !== null ? result11 : '';
            if (result5 !== null) {
              var result6 = parse_id();
              if (result6 !== null) {
                var result7 = parse__();
                if (result7 !== null) {
                  var result10 = parse_angvalues();
                  var result8 = result10 !== null ? result10 : '';
                  if (result8 !== null) {
                    var result9 = parse__();
                    if (result9 !== null) {
                      var result1 = [result3, result4, result5, result6, result7, result8, result9];
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(path, evid, vals) {
          	if(evid=='super') {
          		return gactions.actionExcludeSuper()
          	} else {
          		return gactions.actionExclude(path,evid,vals)
          	}
          })(result1[2], result1[3], result1[5])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_include() {
        var cacheKey = 'include@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 7) === "include") {
          var result3 = "include";
          pos += 7;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"include\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            var savedPos2 = pos;
            var savedPos3 = pos;
            var result13 = parse_procpath();
            if (result13 !== null) {
              var result14 = parse__();
              if (result14 !== null) {
                if (input.substr(pos, 1) === ".") {
                  var result15 = ".";
                  pos += 1;
                } else {
                  var result15 = null;
                  if (reportMatchFailures) {
                    matchFailed("\".\"");
                  }
                }
                if (result15 !== null) {
                  var result11 = [result13, result14, result15];
                } else {
                  var result11 = null;
                  pos = savedPos3;
                }
              } else {
                var result11 = null;
                pos = savedPos3;
              }
            } else {
              var result11 = null;
              pos = savedPos3;
            }
            var result12 = result11 !== null
              ? (function(p) {return p})(result11[0])
              : null;
            if (result12 !== null) {
              var result10 = result12;
            } else {
              var result10 = null;
              pos = savedPos2;
            }
            var result5 = result10 !== null ? result10 : '';
            if (result5 !== null) {
              var result6 = parse_id();
              if (result6 !== null) {
                var result9 = parse_angvalues();
                var result7 = result9 !== null ? result9 : '';
                if (result7 !== null) {
                  var result8 = parse__();
                  if (result8 !== null) {
                    var result1 = [result3, result4, result5, result6, result7, result8];
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(path, evid, vals) {
          	return gactions.actionInclude(path,evid,vals)
          })(result1[2], result1[3], result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_procpath() {
        var cacheKey = 'procpath@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos6 = pos;
        var savedPos7 = pos;
        if (input.substr(pos, 1) === "$") {
          var result22 = "$";
          pos += 1;
        } else {
          var result22 = null;
          if (reportMatchFailures) {
            matchFailed("\"$\"");
          }
        }
        if (result22 !== null) {
          var result23 = parse__();
          if (result23 !== null) {
            var result24 = parse_id();
            if (result24 !== null) {
              var result20 = [result22, result23, result24];
            } else {
              var result20 = null;
              pos = savedPos7;
            }
          } else {
            var result20 = null;
            pos = savedPos7;
          }
        } else {
          var result20 = null;
          pos = savedPos7;
        }
        var result21 = result20 !== null
          ? (function(fst) {
          //		console.log('Singleton path ',fst)
          		return {type:'path',val:[{procId:fst,params:[]}]}
          	})(result20[2])
          : null;
        if (result21 !== null) {
          var result19 = result21;
        } else {
          var result19 = null;
          pos = savedPos6;
        }
        if (result19 !== null) {
          var result0 = result19;
        } else {
          var savedPos4 = pos;
          var savedPos5 = pos;
          var result16 = parse_id();
          if (result16 !== null) {
            var result17 = parse__();
            if (result17 !== null) {
              var result18 = parse_parenpredicates();
              if (result18 !== null) {
                var result14 = [result16, result17, result18];
              } else {
                var result14 = null;
                pos = savedPos5;
              }
            } else {
              var result14 = null;
              pos = savedPos5;
            }
          } else {
            var result14 = null;
            pos = savedPos5;
          }
          var result15 = result14 !== null
            ? (function(fst, prms) {
            //		console.log('Singleton path ',fst,' with params ',prms)
            		return {type:'path',val:[{procId:fst,params:prms}]}
            	})(result14[0], result14[2])
            : null;
          if (result15 !== null) {
            var result13 = result15;
          } else {
            var result13 = null;
            pos = savedPos4;
          }
          if (result13 !== null) {
            var result0 = result13;
          } else {
            var savedPos0 = pos;
            var savedPos1 = pos;
            var result4 = parse_pathtoken();
            if (result4 !== null) {
              var result5 = parse__();
              if (result5 !== null) {
                var savedPos2 = pos;
                var savedPos3 = pos;
                if (input.substr(pos, 1) === ":") {
                  var result10 = ":";
                  pos += 1;
                } else {
                  var result10 = null;
                  if (reportMatchFailures) {
                    matchFailed("\":\"");
                  }
                }
                if (result10 !== null) {
                  var result11 = parse__();
                  if (result11 !== null) {
                    var result12 = parse_pathtoken();
                    if (result12 !== null) {
                      var result8 = [result10, result11, result12];
                    } else {
                      var result8 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result8 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos3;
                }
                var result9 = result8 !== null
                  ? (function(pt) {return pt})(result8[2])
                  : null;
                if (result9 !== null) {
                  var result7 = result9;
                } else {
                  var result7 = null;
                  pos = savedPos2;
                }
                if (result7 !== null) {
                  var result6 = [];
                  while (result7 !== null) {
                    result6.push(result7);
                    var savedPos2 = pos;
                    var savedPos3 = pos;
                    if (input.substr(pos, 1) === ":") {
                      var result10 = ":";
                      pos += 1;
                    } else {
                      var result10 = null;
                      if (reportMatchFailures) {
                        matchFailed("\":\"");
                      }
                    }
                    if (result10 !== null) {
                      var result11 = parse__();
                      if (result11 !== null) {
                        var result12 = parse_pathtoken();
                        if (result12 !== null) {
                          var result8 = [result10, result11, result12];
                        } else {
                          var result8 = null;
                          pos = savedPos3;
                        }
                      } else {
                        var result8 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result8 = null;
                      pos = savedPos3;
                    }
                    var result9 = result8 !== null
                      ? (function(pt) {return pt})(result8[2])
                      : null;
                    if (result9 !== null) {
                      var result7 = result9;
                    } else {
                      var result7 = null;
                      pos = savedPos2;
                    }
                  }
                } else {
                  var result6 = null;
                }
                if (result6 !== null) {
                  var result2 = [result4, result5, result6];
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
            var result3 = result2 !== null
              ? (function(fst, rest) {
              		if(rest.length==0) {return {type:'path',val:[fst]}}
              		return {type:'path',val:[fst].concat(rest)}
              	})(result2[0], result2[2])
              : null;
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result1 = null;
              pos = savedPos0;
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_pathtoken() {
        var cacheKey = 'pathtoken@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_id();
        if (result3 !== null) {
          var result5 = parse_parenpredicates();
          var result4 = result5 !== null ? result5 : '';
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(pid, prms) {
          	return {procId:pid,params:prms}
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_predicates() {
        var cacheKey = 'predicates@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_predicate();
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            var result5 = [];
            var savedPos2 = pos;
            var savedPos3 = pos;
            if (input.substr(pos, 1) === ",") {
              var result9 = ",";
              pos += 1;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("\",\"");
              }
            }
            if (result9 !== null) {
              var result10 = parse__();
              if (result10 !== null) {
                var result11 = parse_predicate();
                if (result11 !== null) {
                  var result7 = [result9, result10, result11];
                } else {
                  var result7 = null;
                  pos = savedPos3;
                }
              } else {
                var result7 = null;
                pos = savedPos3;
              }
            } else {
              var result7 = null;
              pos = savedPos3;
            }
            var result8 = result7 !== null
              ? (function(p) {return p})(result7[2])
              : null;
            if (result8 !== null) {
              var result6 = result8;
            } else {
              var result6 = null;
              pos = savedPos2;
            }
            while (result6 !== null) {
              result5.push(result6);
              var savedPos2 = pos;
              var savedPos3 = pos;
              if (input.substr(pos, 1) === ",") {
                var result9 = ",";
                pos += 1;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed("\",\"");
                }
              }
              if (result9 !== null) {
                var result10 = parse__();
                if (result10 !== null) {
                  var result11 = parse_predicate();
                  if (result11 !== null) {
                    var result7 = [result9, result10, result11];
                  } else {
                    var result7 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result7 = null;
                  pos = savedPos3;
                }
              } else {
                var result7 = null;
                pos = savedPos3;
              }
              var result8 = result7 !== null
                ? (function(p) {return p})(result7[2])
                : null;
              if (result8 !== null) {
                var result6 = result8;
              } else {
                var result6 = null;
                pos = savedPos2;
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(fst, rest) {
          	if(rest.length==0) {return [fst]}
          	return [fst].concat(rest)
          })(result1[0], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_values() {
        var cacheKey = 'values@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_value();
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            var result5 = [];
            var savedPos2 = pos;
            var savedPos3 = pos;
            if (input.substr(pos, 1) === ",") {
              var result9 = ",";
              pos += 1;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("\",\"");
              }
            }
            if (result9 !== null) {
              var result10 = parse__();
              if (result10 !== null) {
                var result11 = parse_value();
                if (result11 !== null) {
                  var result7 = [result9, result10, result11];
                } else {
                  var result7 = null;
                  pos = savedPos3;
                }
              } else {
                var result7 = null;
                pos = savedPos3;
              }
            } else {
              var result7 = null;
              pos = savedPos3;
            }
            var result8 = result7 !== null
              ? (function(v) {return v})(result7[2])
              : null;
            if (result8 !== null) {
              var result6 = result8;
            } else {
              var result6 = null;
              pos = savedPos2;
            }
            while (result6 !== null) {
              result5.push(result6);
              var savedPos2 = pos;
              var savedPos3 = pos;
              if (input.substr(pos, 1) === ",") {
                var result9 = ",";
                pos += 1;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed("\",\"");
                }
              }
              if (result9 !== null) {
                var result10 = parse__();
                if (result10 !== null) {
                  var result11 = parse_value();
                  if (result11 !== null) {
                    var result7 = [result9, result10, result11];
                  } else {
                    var result7 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result7 = null;
                  pos = savedPos3;
                }
              } else {
                var result7 = null;
                pos = savedPos3;
              }
              var result8 = result7 !== null
                ? (function(v) {return v})(result7[2])
                : null;
              if (result8 !== null) {
                var result6 = result8;
              } else {
                var result6 = null;
                pos = savedPos2;
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(fst, rest) {
          	if(rest.length==0) {return [fst]}
          	return [fst].concat(rest)
          })(result1[0], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_value() {
        var cacheKey = 'value@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result8 = parse_newproc();
        if (result8 !== null) {
          var result0 = result8;
        } else {
          var savedPos0 = pos;
          var result7 = parse_procpath();
          if (result7 !== null) {
            var result3 = result7;
          } else {
            var result6 = parse_varload();
            if (result6 !== null) {
              var result3 = result6;
            } else {
              var result5 = parse_litval();
              if (result5 !== null) {
                var result3 = result5;
              } else {
                var result3 = null;;
              };
            };
          }
          var result4 = result3 !== null
            ? (function(v) {return gactions.makeValueExpression(v)})(result3)
            : null;
          if (result4 !== null) {
            var result2 = result4;
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_expr();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("value");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_predicate() {
        var cacheKey = 'predicate@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "*") {
          var result6 = "*";
          pos += 1;
        } else {
          var result6 = null;
          if (reportMatchFailures) {
            matchFailed("\"*\"");
          }
        }
        var result7 = result6 !== null
          ? (function() {return gactions.makeAnyPredicate()})()
          : null;
        if (result7 !== null) {
          var result5 = result7;
        } else {
          var result5 = null;
          pos = savedPos1;
        }
        if (result5 !== null) {
          var result0 = result5;
        } else {
          var result4 = parse_singleboolexpr();
          if (result4 !== null) {
            var result0 = result4;
          } else {
            var savedPos0 = pos;
            var result2 = parse_value();
            var result3 = result2 !== null
              ? (function(v) {return gactions.makeEqPredicate(v)})(result2)
              : null;
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result1 = null;
              pos = savedPos0;
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("predicate");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_expr() {
        var cacheKey = 'expr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "(") {
          var result3 = "(";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"(\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            var result5 = parse_opid();
            if (result5 !== null) {
              var result6 = parse__();
              if (result6 !== null) {
                var savedPos2 = pos;
                var savedPos3 = pos;
                var result12 = parse_value();
                if (result12 !== null) {
                  var result13 = parse__();
                  if (result13 !== null) {
                    var result10 = [result12, result13];
                  } else {
                    var result10 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result10 = null;
                  pos = savedPos3;
                }
                var result11 = result10 !== null
                  ? (function(v) {return v})(result10[0])
                  : null;
                if (result11 !== null) {
                  var result9 = result11;
                } else {
                  var result9 = null;
                  pos = savedPos2;
                }
                if (result9 !== null) {
                  var result7 = [];
                  while (result9 !== null) {
                    result7.push(result9);
                    var savedPos2 = pos;
                    var savedPos3 = pos;
                    var result12 = parse_value();
                    if (result12 !== null) {
                      var result13 = parse__();
                      if (result13 !== null) {
                        var result10 = [result12, result13];
                      } else {
                        var result10 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result10 = null;
                      pos = savedPos3;
                    }
                    var result11 = result10 !== null
                      ? (function(v) {return v})(result10[0])
                      : null;
                    if (result11 !== null) {
                      var result9 = result11;
                    } else {
                      var result9 = null;
                      pos = savedPos2;
                    }
                  }
                } else {
                  var result7 = null;
                }
                if (result7 !== null) {
                  if (input.substr(pos, 1) === ")") {
                    var result8 = ")";
                    pos += 1;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("\")\"");
                    }
                  }
                  if (result8 !== null) {
                    var result1 = [result3, result4, result5, result6, result7, result8];
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(rator, rands) {
          	return gactions.makeExpression(rator,rands)
          })(result1[2], result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("expr");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_boolexpr() {
        var cacheKey = 'boolexpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos2 = pos;
        var savedPos3 = pos;
        if (input.substr(pos, 1) === "(") {
          var result16 = "(";
          pos += 1;
        } else {
          var result16 = null;
          if (reportMatchFailures) {
            matchFailed("\"(\"");
          }
        }
        if (result16 !== null) {
          var result17 = parse__();
          if (result17 !== null) {
            if (input.substr(pos, 1) === "!") {
              var result18 = "!";
              pos += 1;
            } else {
              var result18 = null;
              if (reportMatchFailures) {
                matchFailed("\"!\"");
              }
            }
            if (result18 !== null) {
              var result19 = parse__();
              if (result19 !== null) {
                var result20 = parse_boolexpr();
                if (result20 !== null) {
                  var result21 = parse__();
                  if (result21 !== null) {
                    if (input.substr(pos, 1) === ")") {
                      var result22 = ")";
                      pos += 1;
                    } else {
                      var result22 = null;
                      if (reportMatchFailures) {
                        matchFailed("\")\"");
                      }
                    }
                    if (result22 !== null) {
                      var result14 = [result16, result17, result18, result19, result20, result21, result22];
                    } else {
                      var result14 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result14 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result14 = null;
                  pos = savedPos3;
                }
              } else {
                var result14 = null;
                pos = savedPos3;
              }
            } else {
              var result14 = null;
              pos = savedPos3;
            }
          } else {
            var result14 = null;
            pos = savedPos3;
          }
        } else {
          var result14 = null;
          pos = savedPos3;
        }
        var result15 = result14 !== null
          ? (function(expr) {
          		return gactions.makeNotBoolExpression(expr)
          	})(result14[4])
          : null;
        if (result15 !== null) {
          var result13 = result15;
        } else {
          var result13 = null;
          pos = savedPos2;
        }
        if (result13 !== null) {
          var result0 = result13;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          if (input.substr(pos, 1) === "(") {
            var result4 = "(";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse__();
            if (result5 !== null) {
              var result6 = parse_opid();
              if (result6 !== null) {
                var result7 = parse__();
                if (result7 !== null) {
                  var result8 = parse_value();
                  if (result8 !== null) {
                    var result9 = parse__();
                    if (result9 !== null) {
                      var result10 = parse_value();
                      if (result10 !== null) {
                        var result11 = parse__();
                        if (result11 !== null) {
                          if (input.substr(pos, 1) === ")") {
                            var result12 = ")";
                            pos += 1;
                          } else {
                            var result12 = null;
                            if (reportMatchFailures) {
                              matchFailed("\")\"");
                            }
                          }
                          if (result12 !== null) {
                            var result2 = [result4, result5, result6, result7, result8, result9, result10, result11, result12];
                          } else {
                            var result2 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result2 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result2 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result2 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(rator, fst, snd) {
            		return gactions.makeBoolExpression(rator,fst,snd)
            	})(result2[2], result2[4], result2[6])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("boolexpr");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_singleboolexpr() {
        var cacheKey = 'singleboolexpr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos2 = pos;
        var savedPos3 = pos;
        if (input.substr(pos, 1) === "(") {
          var result14 = "(";
          pos += 1;
        } else {
          var result14 = null;
          if (reportMatchFailures) {
            matchFailed("\"(\"");
          }
        }
        if (result14 !== null) {
          var result15 = parse__();
          if (result15 !== null) {
            if (input.substr(pos, 1) === "!") {
              var result16 = "!";
              pos += 1;
            } else {
              var result16 = null;
              if (reportMatchFailures) {
                matchFailed("\"!\"");
              }
            }
            if (result16 !== null) {
              var result17 = parse__();
              if (result17 !== null) {
                var result18 = parse_singleboolexpr();
                if (result18 !== null) {
                  var result19 = parse__();
                  if (result19 !== null) {
                    if (input.substr(pos, 1) === ")") {
                      var result20 = ")";
                      pos += 1;
                    } else {
                      var result20 = null;
                      if (reportMatchFailures) {
                        matchFailed("\")\"");
                      }
                    }
                    if (result20 !== null) {
                      var result12 = [result14, result15, result16, result17, result18, result19, result20];
                    } else {
                      var result12 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result12 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result12 = null;
                  pos = savedPos3;
                }
              } else {
                var result12 = null;
                pos = savedPos3;
              }
            } else {
              var result12 = null;
              pos = savedPos3;
            }
          } else {
            var result12 = null;
            pos = savedPos3;
          }
        } else {
          var result12 = null;
          pos = savedPos3;
        }
        var result13 = result12 !== null
          ? (function(expr) {
          		return gactions.makeNotPredicate(expr)
          	})(result12[4])
          : null;
        if (result13 !== null) {
          var result11 = result13;
        } else {
          var result11 = null;
          pos = savedPos2;
        }
        if (result11 !== null) {
          var result0 = result11;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          if (input.substr(pos, 1) === "(") {
            var result4 = "(";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse__();
            if (result5 !== null) {
              var result6 = parse_opid();
              if (result6 !== null) {
                var result7 = parse__();
                if (result7 !== null) {
                  var result8 = parse_value();
                  if (result8 !== null) {
                    var result9 = parse__();
                    if (result9 !== null) {
                      if (input.substr(pos, 1) === ")") {
                        var result10 = ")";
                        pos += 1;
                      } else {
                        var result10 = null;
                        if (reportMatchFailures) {
                          matchFailed("\")\"");
                        }
                      }
                      if (result10 !== null) {
                        var result2 = [result4, result5, result6, result7, result8, result9, result10];
                      } else {
                        var result2 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result2 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(rator, fst) {
            		return gactions.makePredicateExpression(rator,fst)
            	})(result2[2], result2[4])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("singleboolexpr");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_litval() {
        var cacheKey = 'litval@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result4 = parse_strval();
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var result3 = parse_float();
          if (result3 !== null) {
            var result0 = result3;
          } else {
            var result2 = parse_integer();
            if (result2 !== null) {
              var result0 = result2;
            } else {
              var result1 = parse_bool();
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_strval() {
        var cacheKey = 'strval@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "'") {
          var result3 = "'";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"'\"");
          }
        }
        if (result3 !== null) {
          var result6 = parse_strvaltok();
          if (result6 !== null) {
            var result4 = [];
            while (result6 !== null) {
              result4.push(result6);
              var result6 = parse_strvaltok();
            }
          } else {
            var result4 = null;
          }
          if (result4 !== null) {
            if (input.substr(pos, 1) === "'") {
              var result5 = "'";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"'\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(chars) {return {type:'string',val:chars.join("")}})(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("string");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_strvaltok() {
        var cacheKey = 'strvaltok@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var savedPos2 = pos;
        var savedReportMatchFailuresVar0 = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos, 1) === "'") {
          var result5 = "'";
          pos += 1;
        } else {
          var result5 = null;
          if (reportMatchFailures) {
            matchFailed("\"'\"");
          }
        }
        reportMatchFailures = savedReportMatchFailuresVar0;
        if (result5 === null) {
          var result3 = '';
        } else {
          var result3 = null;
          pos = savedPos2;
        }
        if (result3 !== null) {
          if (input.length > pos) {
            var result4 = input.charAt(pos);
            pos++;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed('any character');
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(c) {return c})(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_integer() {
        var cacheKey = 'integer@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(digits) { return {type:'int',val:parseInt(digits.join(""), 10)} })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("integer");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_float() {
        var cacheKey = 'float@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result7 = input.charAt(pos);
          pos++;
        } else {
          var result7 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        if (result7 !== null) {
          var result3 = [];
          while (result7 !== null) {
            result3.push(result7);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result7 = input.charAt(pos);
              pos++;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          var result3 = null;
        }
        if (result3 !== null) {
          if (input.substr(pos, 1) === ".") {
            var result4 = ".";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result4 !== null) {
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result6 = input.charAt(pos);
              pos++;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            if (result6 !== null) {
              var result5 = [];
              while (result6 !== null) {
                result5.push(result6);
                if (input.substr(pos).match(/^[0-9]/) !== null) {
                  var result6 = input.charAt(pos);
                  pos++;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("[0-9]");
                  }
                }
              }
            } else {
              var result5 = null;
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(integral, decimal) {return {type:'float',val:parseFloat(integral.join('')+'.'+decimal.join(''))}})(result1[0], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("float");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_bool() {
        var cacheKey = 'bool@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos1 = pos;
        if (input.substr(pos, 4) === "true") {
          var result5 = "true";
          pos += 4;
        } else {
          var result5 = null;
          if (reportMatchFailures) {
            matchFailed("\"true\"");
          }
        }
        var result6 = result5 !== null
          ? (function() {return {type:'bool',val:true}})()
          : null;
        if (result6 !== null) {
          var result4 = result6;
        } else {
          var result4 = null;
          pos = savedPos1;
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 5) === "false") {
            var result2 = "false";
            pos += 5;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"false\"");
            }
          }
          var result3 = result2 !== null
            ? (function() {return {type:'bool',val:false}})()
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("bool");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_varload() {
        var cacheKey = 'varload@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_id();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var savedPos3 = pos;
          if (input.substr(pos, 1) === ".") {
            var result8 = ".";
            pos += 1;
          } else {
            var result8 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result8 !== null) {
            var result9 = parse__();
            if (result9 !== null) {
              var result10 = parse_id();
              if (result10 !== null) {
                var result6 = [result8, result9, result10];
              } else {
                var result6 = null;
                pos = savedPos3;
              }
            } else {
              var result6 = null;
              pos = savedPos3;
            }
          } else {
            var result6 = null;
            pos = savedPos3;
          }
          var result7 = result6 !== null
            ? (function(i) {return i})(result6[2])
            : null;
          if (result7 !== null) {
            var result5 = result7;
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var savedPos3 = pos;
            if (input.substr(pos, 1) === ".") {
              var result8 = ".";
              pos += 1;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("\".\"");
              }
            }
            if (result8 !== null) {
              var result9 = parse__();
              if (result9 !== null) {
                var result10 = parse_id();
                if (result10 !== null) {
                  var result6 = [result8, result9, result10];
                } else {
                  var result6 = null;
                  pos = savedPos3;
                }
              } else {
                var result6 = null;
                pos = savedPos3;
              }
            } else {
              var result6 = null;
              pos = savedPos3;
            }
            var result7 = result6 !== null
              ? (function(i) {return i})(result6[2])
              : null;
            if (result7 !== null) {
              var result5 = result7;
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(fst, rest) {
          	if(rest.length==0) {return {type:'var', val:fst}}
          	else {
          		return {type:'dotvar', val: [fst].concat(rest)}
          	}
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("varload");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_id() {
        var cacheKey = 'id@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "_") {
          var result9 = "_";
          pos += 1;
        } else {
          var result9 = null;
          if (reportMatchFailures) {
            matchFailed("\"_\"");
          }
        }
        if (result9 !== null) {
          var result3 = result9;
        } else {
          if (input.substr(pos).match(/^[a-zA-Z]/) !== null) {
            var result8 = input.charAt(pos);
            pos++;
          } else {
            var result8 = null;
            if (reportMatchFailures) {
              matchFailed("[a-zA-Z]");
            }
          }
          if (result8 !== null) {
            var result3 = result8;
          } else {
            var result3 = null;;
          };
        }
        if (result3 !== null) {
          var result4 = [];
          if (input.substr(pos, 1) === "_") {
            var result7 = "_";
            pos += 1;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("\"_\"");
            }
          }
          if (result7 !== null) {
            var result5 = result7;
          } else {
            if (input.substr(pos).match(/^[a-zA-Z0-9]/) !== null) {
              var result6 = input.charAt(pos);
              pos++;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("[a-zA-Z0-9]");
              }
            }
            if (result6 !== null) {
              var result5 = result6;
            } else {
              var result5 = null;;
            };
          }
          while (result5 !== null) {
            result4.push(result5);
            if (input.substr(pos, 1) === "_") {
              var result7 = "_";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\"_\"");
              }
            }
            if (result7 !== null) {
              var result5 = result7;
            } else {
              if (input.substr(pos).match(/^[a-zA-Z0-9]/) !== null) {
                var result6 = input.charAt(pos);
                pos++;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("[a-zA-Z0-9]");
                }
              }
              if (result6 !== null) {
                var result5 = result6;
              } else {
                var result5 = null;;
              };
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(fstchar, rest) {var id = [fstchar].concat(rest).join(''); return id})(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("identifier");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_opid() {
        var cacheKey = 'opid@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result3 = parse_opidchar();
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            var result3 = parse_opidchar();
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(chars) {return chars.join('')})(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("operatorIdentifier");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_opidchar() {
        var cacheKey = 'opidchar@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var savedPos2 = pos;
        var savedReportMatchFailuresVar0 = reportMatchFailures;
        reportMatchFailures = false;
        var result5 = parse_space();
        reportMatchFailures = savedReportMatchFailuresVar0;
        if (result5 === null) {
          var result3 = '';
        } else {
          var result3 = null;
          pos = savedPos2;
        }
        if (result3 !== null) {
          if (input.length > pos) {
            var result4 = input.charAt(pos);
            pos++;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed('any character');
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(c) {return c})(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
		var wu = require('wu').wu
      
		  , ga = require('./grammaractions')
      
	
      
		gactions = new ga.GActions()
      
		function l() {}
      
		function join(ar,sep) {
      
			var out = ''
      
			for(var i=0;i<ar.length;i++) {
      
				if(i==0) {out+=ar[i]}
      
				else{out += sep + ar[i]}
      
			}
      
			return out
      
		}
      
	
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
